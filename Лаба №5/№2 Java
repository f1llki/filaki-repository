import java.util.*;

public class TSPGreedy {
    private int n;
    private int[][] graph;
    private int[] path;
    private int totalCost;

    public TSPGreedy(int[][] inputGraph) {
        this.graph = inputGraph;
        this.n = graph.length;
        this.path = new int[n + 1];
        this.totalCost = 0;
    }

    public void solve() {
        boolean[] visited = new boolean[n];
        path[0] = 0;  // Начинаем с города 0
        visited[0] = true;
        
        int currentCity = 0;
        int count = 1;
        
        while (count < n) {
            int nextCity = -1;
            int minDistance = Integer.MAX_VALUE;
            
            // Ищем ближайший непосещенный город
            for (int i = 0; i < n; i++) {
                if (!visited[i] && graph[currentCity][i] > 0 && 
                    graph[currentCity][i] < minDistance) {
                    minDistance = graph[currentCity][i];
                    nextCity = i;
                }
            }
            
            if (nextCity != -1) {
                path[count] = nextCity;
                visited[nextCity] = true;
                totalCost += minDistance;
                currentCity = nextCity;
                count++;
            }
        }
        
        // Возвращаемся в начальный город
        totalCost += graph[currentCity][0];
        path[n] = 0;
    }

    public void printResult() {
        System.out.println("Стоимость (жадный алгоритм): " + totalCost);
        System.out.print("Путь: ");
        for (int i = 0; i <= n; i++) {
            System.out.print(path[i]);
            if (i < n) System.out.print(" -> ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };

        TSPGreedy tsp = new TSPGreedy(graph);
        tsp.solve();
        tsp.printResult();
    }
}
