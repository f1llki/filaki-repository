#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>
using namespace std;

class TSPBranchAndBound {
private:
    int n;
    vector<vector<int>> graph;
    vector<bool> visited;
    int final_res = INT_MAX;
    vector<int> final_path;

    void copyToFinal(vector<int>& curr_path) {
        for (int i = 0; i < n; i++)
            final_path[i] = curr_path[i];
        final_path[n] = curr_path[0];
    }

    int firstMin(int i) {
        int min = INT_MAX;
        for (int k = 0; k < n; k++)
            if (graph[i][k] < min && i != k)
                min = graph[i][k];
        return min;
    }

    int secondMin(int i) {
        int first = INT_MAX, second = INT_MAX;
        for (int j = 0; j < n; j++) {
            if (i == j) continue;
            
            if (graph[i][j] <= first) {
                second = first;
                first = graph[i][j];
            } else if (graph[i][j] <= second && graph[i][j] != first) {
                second = graph[i][j];
            }
        }
        return second;
    }

    void TSPRec(int curr_bound, int curr_weight, int level, vector<int>& curr_path) {
        if (level == n) {
            if (graph[curr_path[level-1]][curr_path[0]] != 0) {
                int curr_res = curr_weight + graph[curr_path[level-1]][curr_path[0]];
                if (curr_res < final_res) {
                    copyToFinal(curr_path);
                    final_res = curr_res;
                }
            }
            return;
        }

        for (int i = 0; i < n; i++) {
            if (graph[curr_path[level-1]][i] != 0 && !visited[i]) {
                int temp = curr_bound;
                curr_weight += graph[curr_path[level-1]][i];

                if (level == 1)
                    curr_bound -= (firstMin(curr_path[level-1]) + firstMin(i)) / 2;
                else
                    curr_bound -= (secondMin(curr_path[level-1]) + firstMin(i)) / 2;

                if (curr_bound + curr_weight < final_res) {
                    curr_path[level] = i;
                    visited[i] = true;
                    TSPRec(curr_bound, curr_weight, level + 1, curr_path);
                }

                curr_weight -= graph[curr_path[level-1]][i];
                curr_bound = temp;

                visited.assign(n, false);
                for (int j = 0; j <= level - 1; j++)
                    visited[curr_path[j]] = true;
            }
        }
    }

public:
    TSPBranchAndBound(vector<vector<int>> input_graph) {
        graph = input_graph;
        n = graph.size();
        visited.resize(n, false);
        final_path.resize(n + 1);
    }

    void solve() {
        vector<int> curr_path(n + 1, -1);
        visited[0] = true;
        curr_path[0] = 0;

        int curr_bound = 0;
        for (int i = 0; i < n; i++)
            curr_bound += (firstMin(i) + secondMin(i));

        curr_bound = (curr_bound & 1) ? curr_bound / 2 + 1 : curr_bound / 2;

        TSPRec(curr_bound, 0, 1, curr_path);
    }

    void printResult() {
        cout << "Минимальная стоимость: " << final_res << endl;
        cout << "Путь: ";
        for (int i = 0; i <= n; i++)
            cout << final_path[i] << " ";
        cout << endl;
    }
};

int main() {
    vector<vector<int>> graph = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    TSPBranchAndBound tsp(graph);
    tsp.solve();
    tsp.printResult();

    return 0;
}
