import java.util.*;

class PrimGraph {
    private int V; // Количество вершин
    private List<List<Pair>> adj; // Список смежности
    
    class Pair {
        int vertex;
        int weight;
        
        Pair(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }
    
    public PrimGraph(int vertices) {
        this.V = vertices;
        adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }
    
    public void addEdge(int u, int v, int weight) {
        adj.get(u).add(new Pair(v, weight));
        adj.get(v).add(new Pair(u, weight));
    }
    
    // Алгоритм Прима для минимального остовного дерева
    public int primMST() {
        boolean[] inMST = new boolean[V]; // Вершины в MST
        int[] key = new int[V];           // Минимальные веса ребер
        Arrays.fill(key, Integer.MAX_VALUE); // Инициализация
        
        PriorityQueue<Pair> pq = new PriorityQueue<>(
            (a, b) -> a.weight - b.weight // Сортировка по весу
        );
        
        int totalWeight = 0; // Суммарный вес MST
        
        // Начинаем с вершины 0
        key[0] = 0;
        pq.offer(new Pair(0, 0));
        
        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int u = current.vertex;
            int weight = current.weight;
            
            // Пропускаем если уже в MST
            if (inMST[u]) continue;
            
            // Добавляем вершину в MST
            inMST[u] = true;
            totalWeight += weight;
            
            // Обновляем ключи соседних вершин
            for (Pair edge : adj.get(u)) {
                int v = edge.vertex;
                int w = edge.weight;
                
                // Если вершина не в MST и найден более легкий путь
                if (!inMST[v] && w < key[v]) {
                    key[v] = w;
                    pq.offer(new Pair(v, w));
                }
            }
        }
        
        return totalWeight;
    }
}

public class PrimMain {
    public static void main(String[] args) {
        PrimGraph g = new PrimGraph(4);
        
        g.addEdge(0, 1, 10);
        g.addEdge(0, 2, 6);
        g.addEdge(0, 3, 5);
        g.addEdge(1, 3, 15);
        g.addEdge(2, 3, 4);
        
        int mstWeight = g.primMST();
        System.out.println("Вес минимального остовного дерева: " + mstWeight);
    }
}
