import java.util.*;

class Graph {
    private int V; // Количество вершин
    private List<List<Pair>> adj; // Список смежности
    
    // Вспомогательный класс для хранения пар (вершина, вес)
    class Pair {
        int vertex;
        int weight;
        
        Pair(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }
    
    public Graph(int vertices) {
        this.V = vertices;
        adj = new ArrayList<>();
        // Инициализируем списки смежности для каждой вершины
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }
    
    // Добавление ребра между вершинами u и v с весом weight
    public void addEdge(int u, int v, int weight) {
        adj.get(u).add(new Pair(v, weight));
        adj.get(v).add(new Pair(u, weight)); // Для неориентированного графа
    }
    
    // Алгоритм Дейкстры для поиска кратчайших путей
    public int[] dijkstra(int start) {
        // Массив для хранения кратчайших расстояний
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE); // Инициализируем бесконечностью
        
        // Приоритетная очередь с компаратором для сортировки по весу
        PriorityQueue<Pair> pq = new PriorityQueue<>(
            (a, b) -> a.weight - b.weight // Сортировка по возрастанию веса
        );
        
        // Инициализация начальной вершины
        dist[start] = 0;
        pq.offer(new Pair(start, 0));
        
        while (!pq.isEmpty()) {
            // Извлекаем вершину с минимальным расстоянием
            Pair current = pq.poll();
            int u = current.vertex;
            int currentDist = current.weight;
            
            // Пропускаем устаревшие записи
            if (currentDist > dist[u]) continue;
            
            // Обходим всех соседей текущей вершины
            for (Pair edge : adj.get(u)) {
                int v = edge.vertex;      // Соседняя вершина
                int weight = edge.weight; // Вес ребра
                
                // Релаксация ребра
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.offer(new Pair(v, dist[v])); // Добавляем в очередь
                }
            }
        }
        
        return dist;
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph(5);
        
        // Строим тот же граф, что и в C++ версии
        g.addEdge(0, 1, 4);
        g.addEdge(0, 2, 1);
        g.addEdge(2, 1, 2);
        g.addEdge(2, 3, 5);
        g.addEdge(1, 3, 1);
        g.addEdge(3, 4, 3);
        
        int[] distances = g.dijkstra(0);
        
        System.out.println("Кратчайшие расстояния от вершины 0:");
        for (int i = 0; i < distances.length; i++) {
            System.out.println("До вершины " + i + ": " + distances[i]);
        }
    }
}
