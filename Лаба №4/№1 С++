#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

class Graph {
private:
    int V; // Количество вершин
    vector<vector<pair<int, int>>> adj; // Список смежности: [вершина] -> [(сосед, вес)]

public:
    Graph(int vertices) : V(vertices) {
        adj.resize(V); // Инициализируем список смежности
    }

    // Добавление ребра между вершинами u и v с весом weight
    void addEdge(int u, int v, int weight) {
        adj[u].push_back({v, weight});
        adj[v].push_back({u, weight}); // Для неориентированного графа
    }

    // Алгоритм Дейкстры для поиска кратчайших путей от start до всех вершин
    vector<int> dijkstra(int start) {
        // Массив для хранения кратчайших расстояний
        vector<int> dist(V, INT_MAX);
        
        // Приоритетная очередь для выбора вершины с минимальным расстоянием
        // Хранит пары (расстояние, вершина)
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        // Инициализация начальной вершины
        dist[start] = 0;
        pq.push({0, start});
        
        while (!pq.empty()) {
            // Извлекаем вершину с минимальным расстоянием
            int u = pq.top().second;
            int current_dist = pq.top().first;
            pq.pop();
            
            // Пропускаем устаревшие записи
            if (current_dist > dist[u]) continue;
            
            // Обходим всех соседей текущей вершины
            for (auto &edge : adj[u]) {
                int v = edge.first;      // Соседняя вершина
                int weight = edge.second; // Вес ребра
                
                // Релаксация ребра: если найден более короткий путь
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v}); // Добавляем в очередь для обработки
                }
            }
        }
        
        return dist;
    }
};

int main() {
    // Создаем граф с 5 вершинами
    Graph g(5);
    
    // Добавляем ребра графа
    g.addEdge(0, 1, 4);  // Ребро 0-1 с весом 4
    g.addEdge(0, 2, 1);  // Ребро 0-2 с весом 1
    g.addEdge(2, 1, 2);  // Ребро 2-1 с весом 2
    g.addEdge(2, 3, 5);  // Ребро 2-3 с весом 5
    g.addEdge(1, 3, 1);  // Ребро 1-3 с весом 1
    g.addEdge(3, 4, 3);  // Ребро 3-4 с весом 3
    
    // Вычисляем кратчайшие пути от вершины 0
    vector<int> distances = g.dijkstra(0);
    
    cout << "Кратчайшие расстояния от вершины 0:" << endl;
    for (int i = 0; i < distances.size(); i++) {
        cout << "До вершины " << i << ": " << distances[i] << endl;
    }
    
    return 0;
}
