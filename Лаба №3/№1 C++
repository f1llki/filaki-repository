#include <iostream>
#include <vector>
#include <stdexcept>

template<typename T>
class BinaryHeap {
private:
    std::vector<T> heap;

    void siftUp(int idx) {
        while (idx > 0) {
            int parent = (idx - 1) / 2;
            if (heap[idx] >= heap[parent]) break;
            std::swap(heap[idx], heap[parent]);
            idx = parent;
        }
    }

    void siftDown(int idx) {
        int size = heap.size();
        while (idx < size) {
            int left = 2 * idx + 1;
            int right = 2 * idx + 2;
            int minIdx = idx;

            if (left < size && heap[left] < heap[minIdx]) minIdx = left;
            if (right < size && heap[right] <[minIdx]) minIdx = right;
            if (minIdx == idx) break;

            std::swap(heap[idx], heap[minIdx]);
            idx = minIdx;
        }
    }

public:
    BinaryHeap() = default;
    
    BinaryHeap(const std::vector<T>& elements) : heap(elements) {
        for (int i = heap.size()/2 - 1; i >= 0; i--) 
            siftDown(i);
    }

    void push(const T& value) {
        heap.push_back(value);
        siftUp(heap.size() - 1);
    }

    T pop() {
        if (heap.empty()) throw std::runtime_error("Heap is empty");
        
        T min = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        
        if (!heap.empty()) siftDown(0);
        return min;
    }

    T top() const {
        if (heap.empty()) throw std::runtime_error("Heap is empty");
        return heap[0];
    }

    bool empty() const { return heap.empty(); }
    size_t size() const { return heap.size(); }

    void print() const {
        std::cout << "Heap: ";
        for (auto& x : heap) std::cout << x << " ";
        std::cout << "\n";
    }
};

int main() {
    BinaryHeap<int> heap;
    
    heap.push(5);
    heap.push(3);
    heap.push(8);
    heap.push(1);
    heap.push(4);

    heap.print();
    std::cout << "Min: " << heap.top() << "\n";

    std::cout << "Popping: ";
    while (!heap.empty()) 
        std::cout << heap.pop() << " ";
    std::cout << "\n";

    return 0;
}
