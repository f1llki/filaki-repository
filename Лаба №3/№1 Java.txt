import java.util.*;

public class BinaryHeap<T extends Comparable<T>> {
    private ArrayList<T> heap;

    private void siftUp(int idx) {
        while (idx > 0) {
            int parent = (idx - 1) / 2;
            if (heap.get(idx).compareTo(heap.get(parent)) >= 0) break;
            Collections.swap(heap, idx, parent);
            idx = parent;
        }
    }

    private void siftDown(int idx) {
        int size = heap.size();
        while (idx < size) {
            int left = 2 * idx + 1;
            int right = 2 * idx + 2;
            int minIdx = idx;

            if (left < size && heap.get(left).compareTo(heap.get(minIdx)) < 0) 
                minIdx = left;
            if (right < size && heap.get(right).compareTo(heap.get(minIdx)) < 0) 
                minIdx = right;
            if (minIdx == idx) break;

            Collections.swap(heap, idx, minIdx);
            idx = minIdx;
        }
    }

    public BinaryHeap() {
        heap = new ArrayList<>();
    }
    
    public BinaryHeap(ArrayList<T> elements) {
        heap = new ArrayList<>(elements);
        for (int i = heap.size() / 2 - 1; i >= 0; i--) 
            siftDown(i);
    }

    public void push(T value) {
        heap.add(value);
        siftUp(heap.size() - 1);
    }

    public T pop() {
        if (heap.isEmpty()) throw new RuntimeException("Heap is empty");
        
        T min = heap.get(0);
        heap.set(0, heap.get(heap.size() - 1));
        heap.remove(heap.size() - 1);
        
        if (!heap.isEmpty()) siftDown(0);
        return min;
    }

    public T top() {
        if (heap.isEmpty()) throw new RuntimeException("Heap is empty");
        return heap.get(0);
    }

    public boolean empty() { 
        return heap.isEmpty(); 
    }
    
    public int size() { 
        return heap.size(); 
    }

    public void print() {
        System.out.print("Heap: ");
        for (T x : heap) 
            System.out.print(x + " ");
        System.out.println();
    }

    public static void main(String[] args) {
        BinaryHeap<Integer> heap = new BinaryHeap<>();
        
        heap.push(5);
        heap.push(3);
        heap.push(8);
        heap.push(1);
        heap.push(4);

        heap.print();
        System.out.println("Min: " + heap.top());

        System.out.print("Popping: ");
        while (!heap.empty()) 
            System.out.print(heap.pop() + " ");
        System.out.println();
    }
}