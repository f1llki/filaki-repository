#include <iostream>
#include <vector>
#include <stdexcept>

template<typename T>
class BinaryHeap {
    std::vector<T> heap;
    
    void siftUp(int i) {
        while (i > 0 && heap[i] < heap[(i-1)/2]) {
            std::swap(heap[i], heap[(i-1)/2]);
            i = (i-1)/2;
        }
    }
    
    void siftDown(int i) {
        int n = heap.size();
        while (2*i+1 < n) {
            int child = 2*i+1;
            if (child+1 < n && heap[child+1] < heap[child]) child++;
            if (heap[i] <= heap[child]) break;
            std::swap(heap[i], heap[child]);
            i = child;
        }
    }

public:
    BinaryHeap() = default;
    
    void insert(T value) {
        heap.push_back(value);
        siftUp(heap.size()-1);
    }
    
    T extractMin() {
        if (heap.empty()) throw std::runtime_error("Heap empty");
        T min = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        if (!heap.empty()) siftDown(0);
        return min;
    }
    
    T getMin() const {
        if (heap.empty()) throw std::runtime_error("Heap empty");
        return heap[0];
    }
    
    bool empty() const { return heap.empty(); }
    size_t size() const { return heap.size(); }
    
    void print() const {
        for (auto& x : heap) std::cout << x << " ";
        std::cout << "\n";
    }
};

int main() {
    BinaryHeap<int> heap;
    
    heap.insert(10);
    heap.insert(5);
    heap.insert(15);
    heap.insert(3);
    heap.insert(7);

    heap.print();
    std::cout << "Min: " << heap.getMin() << "\n";

    std::cout << "Extracting: ";
    while (!heap.empty()) std::cout << heap.extractMin() << " ";
    std::cout << "\n";
}