class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

class Solution {
    // Алгоритм Флойда (черепаха и заяц)
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false;
        
        ListNode slow = head;    // Медленный указатель (1 шаг)
        ListNode fast = head;    // Быстрый указатель (2 шага)
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast)    // Если встретились - есть цикл
                return true;
        }
        return false;            // Дошел до конца - цикла нет
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Создаем список с циклом: 1->2->3->4->5->2
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);
        head.next.next.next.next.next = head.next; // Замыкаем на узел 2
        
        System.out.println("Список с циклом: " + (solution.hasCycle(head) ? "есть цикл" : "нет цикла"));
        
        // Создаем список без цикла: 1->2->3->4->5
        ListNode head2 = new ListNode(1);
        head2.next = new ListNode(2);
        head2.next.next = new ListNode(3);
        head2.next.next.next = new ListNode(4);
        head2.next.next.next.next = new ListNode(5);
        
        System.out.println("Список без цикла: " + (solution.hasCycle(head2) ? "есть цикл" : "нет цикла"));
        
        // Пустой список
        System.out.println("Пустой список: " + (solution.hasCycle(null) ? "есть цикл" : "нет цикла"));
    }
}
